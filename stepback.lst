   1 0000               # File: 	stepback.asm
   2 0000               # Author: 	Margaret Dorsey
   3 0000               #
   4 0000               # Description:	Implements a stack structure and uses it to handle stepping 
   5 0000               # 		back during the backtracking algorithm
   6 0000               #
   7 0000               # Revisions: 	see gitlog.txt
   8 0000               
   9 0000               #
  10 0000               # CONSTANT DEFINTIONS
  11 0000               #
  12 0000               
  13 0000               #syscall
  14 0000               EXIT = 10
  15 0000               
  16 0000               #for printing
  17 0000               IMPOSSIBLE_PUZZLE = 2
  18 0000               
  19 0000               #
  20 0000               # DATA BLOCK
  21 0000               #
  22 0000               
  23 0000               	.data
  24 0000               	.align 2
  25 0000               sqr_stack:
  26 0000 00000000		.space 400	#100 tiles is the maximum amount we'd ever need
          00000000
          00000000
          00000000
          00000000
          00000000
  27 0190               			#stack will store address of tile in board array
  28 0190               
  29 0190               stack_ptr:
  30 0190 00000000		.word sqr_stack	#keep track of where the top of our stack is
  31 0194               
  32 0194               #
  33 0194               # FUNCTIONS
  34 0194               #
  35 0000               	.text
  36 0000               	.align 2
  37 0000               	.globl stepback
  38 0000               	.globl print_predef
  39 0000               
  40 0000               #
  41 0000               # Name: 	step_back
  42 0000               #
  43 0000               # Description:	Pops the most recently changed tile off the top of the
  44 0000               #		stack and returns its address.
  45 0000               #		If we try to step back past the start of the puzzle, 
  46 0000               #		impossible puzzle is triggered from here.
  47 0000               #
  48 0000               # Arguments:	None
  49 0000               #		
  50 0000               #
  51 0000               # Returns:	The address of the square we stepped back to in the board 
  52 0000               #		array.
  53 0000               #
  54 0000               
  55 0000               step_back:
  56 0000 3C080000		la	$t0, stack_ptr
     0004 35080000
  57 0008 3C0A0000		la	$t2, sqr_stack
     000c 354A0000
  58 0010 010A582A		slt	$t3, $t0, $t2		#if we're past the bottom of our stack
  59 0014 15600004		bne	$t3, $zero, sb_ok
  60 0018 34040002		ori	$a0, $zero, IMPOSSIBLE_PUZZLE
  61 001c 0C000000		jal	print_predef
  62 0020 3402000A		ori	$v0, $zero, EXIT	#exit the program after printing
  63 0024 0000000C		syscall		
  64 0028               sb_ok:
  65 0028 8D090000		lw	$t1, 0($t0)	#get ptr to the top of our stack
  66 002c 8D220000		lw	$v0, 0($t1)	#get the top of our stack
  67 0030 2129FFFC		addi	$t1, $t1, -4	#move top of stack down
  68 0034 AD0A0000		sw	$t2, 0($t0)
  69 0038 03E00008		jr	$ra
  70 003c               	.globl step_forward
  71 003c               
  72 003c               #
  73 003c               # Name: 	step_forward
  74 003c               #
  75 003c               # Description: 	pushes the tile we're about to change onto the stack.
  76 003c               #
  77 003c               # Arguments: 	a0: the address of the square we're setting in the board array
  78 003c               #
  79 003c               # Returns: 	Nothing
  80 003c               #
  81 003c               
  82 003c               step_forward:
  83 003c 3C080000		la	$t0, stack_ptr	#get address of stack ptr
     0040 35080000
  84 0044 8D090000		lw	$t1, 0($t0)	#get address of top of stack
  85 0048 AD240000		sw	$a0, 0($t1)	#store the new address
  86 004c 21290004		addi	$t1, $t1, 4	#move the top of our stack
  87 0050 AD090000		sw	$t1, 0($t0)
  88 0054 03E00008		jr	$ra		#return


EXIT               = 0000000A   
IMPOSSIBLE_PUZZLE  = 00000002   
print_predef         ******** XG
sb_ok                00000028 R  text 
sqr_stack            00000000 R  data 
stack_ptr            00000190 R  data 
step_back            00000000 R  text 
step_forward         0000003C RG text 
stepback             ******** XG
