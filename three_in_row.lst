   1 0000               # File: three_in_row.asm
   2 0000               # Author: Margaret Dorsey
   3 0000               #
   4 0000               # Description:
   5 0000               #
   6 0000               #
   7 0000               #
   8 0000               # Revisions: see gitlog.txt
   9 0000               #
  10 0000               
  11 0000               
  12 0000               #
  13 0000               # CONSTANT DEFINITIONS
  14 0000               #
  15 0000               
  16 0000               # syscalls
  17 0000               READ_INT = 		5
  18 0000               EXIT =			10
  19 0000               
  20 0000               #PRINT SWITCH LITERALS
  21 0000               INVALID_BOARD_SIZE =	0
  22 0000               INVALID_INPUT_VALUE =	1
  23 0000               IMPOSSIBLE_PUZZLE =	2
  24 0000               PROGRAM_BANNER =	3
  25 0000               INITIAL_PUZZLE =	4
  26 0000               FINAL_PUZZLE =		5
  27 0000               NEWLINE	=		6
  28 0000               
  29 0000               #
  30 0000               # DATA BLOCK AND GLOBALS
  31 0000               #
  32 0000               	.globl main		#entry point for program
  33 0000               	.globl print_predef	#for printing
  34 0000               
  35 0000               	.data
  36 0000               	.align 2
  37 0000               board_arr:
  38 0000 00000000		.space 400		#the maximum size we would need for our
          00000000
          00000000
          00000000
          00000000
          00000000
  39 0190               				#board, 10x10x4 bytes
  40 0190               
  41 0190               
  42 0000               	.text
  43 0000               	.align 2	
  44 0000               #
  45 0000               # Name: main
  46 0000               #
  47 0000               # Description:	Handles input, then calls appropriate functions for the 
  48 0000               # 		continuation of the program, and terminates.
  49 0000               #
  50 0000               #		The program itself takes an nxn 3 in a row puzzle and
  51 0000               #		solves it.
  52 0000               #
  53 0000               #
  54 0000               
  55 0000               main:
  56 0000 23BDFFF4		addi	$sp, $sp, -12 		#make space for return address
  57 0004 AFBF0000		sw	$ra, 0($sp)	
  58 0008 AFB00004		sw	$s0, 4($sp)
  59 000c AFB10008		sw	$s1, 8($sp)
  60 0010               	
  61 0010 34020005		li	$v0, READ_INT		#get the dimension
  62 0014 0000000C		syscall
  63 0018               
  64 0018 00408025		or	$s0, $v0, $zero		#check value for evenness
  65 001c 32080001		andi	$t0, $s0, 1		#will be 0 if even, 1 if odd
  66 0020 11000003		beq	$t0, $zero, even
  67 0024 34040000		li	$a0, INVALID_BOARD_SIZE
  68 0028 0C000000		jal	print_predef		#print out our error message
  69 002c 08000017		j	main_done		#get out of the program
  70 0030               even:
  71 0030 2A080002		slti	$t0, $s0, 2		#less than 2
  72 0034 2A09000B		slti	$t1, $s0, 11		#less than 11
  73 0038 01094820		add	$t1, $t0, $t1		#if less than 2, will be 2
  74 003c               					#if greater than 10 will be 0
  75 003c               					#if in range will be 1
  76 003c 34080001		li	$t0, 1
  77 0040 11280003		beq	$t1, $t0, dim_valid	#break on within range
  78 0044 34040000		li 	$a0, INVALID_BOARD_SIZE	#print our error message
  79 0048 0C000000		jal	print_predef
  80 004c 08000017		j	main_done
  81 0050               dim_valid:	
  82 0050 01004024		and	$t0, $t0, $zero		#set our loop control variable to 0
  83 0054 3C110000		la	$s1, board_arr		#get our memory for the board array
     0058 36310000
  84 005c               board_loop:
  85 005c               #	beq	$t0, $v0, board_loop_done
  86 005c               	
  87 005c               
  88 005c               #	j	board_loop		#back to top
  89 005c               board_loop_done:
  90 005c               
  91 005c               main_done:
  92 005c 8FB10008		lw	$s1, 8($sp)
  93 0060 8FB00004		lw	$s0, 4($sp)		#restore stack
  94 0064 8FBF0000		lw	$ra, 0($sp)
  95 0068 23BD000C		addi	$sp, $sp, 12	
  96 006c 03E00008		jr	$ra			#return
  97 0070               #
  98 0070               # Name: enter_square_value
  99 0070               #
 100 0070               # Description: 	Validates a read in value for a square (i.e. it is 0, 1, or 2)
 101 0070               #		and then enters it in to the allocated array for our board.
 102 0070               #
 103 0070               # Arguments:	$a0 is pointer to next array element
 104 0070               #		$a1 is read number
 105 0070               #
 106 0070               # Returns: 	nothing
 107 0070               #
 108 0070               
 109 0070               enter_square_value:
 110 0070               
 111 0070               
 112 0070               	


EXIT                 = 0000000A   
FINAL_PUZZLE         = 00000005   
IMPOSSIBLE_PUZZLE    = 00000002   
INITIAL_PUZZLE       = 00000004   
INVALID_BOARD_SIZE   = 00000000   
INVALID_INPUT_VALUE  = 00000001   
NEWLINE              = 00000006   
PROGRAM_BANNER       = 00000003   
READ_INT             = 00000005   
board_arr              00000000 R  data 
board_loop             0000005C R  text 
board_loop_done        0000005C R  text 
dim_valid              00000050 R  text 
enter_square_value     00000070 R  text 
even                   00000030 R  text 
main                   00000000 RG text 
main_done              0000005C R  text 
print_predef           ******** XG
