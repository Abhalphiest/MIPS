   1 0000               # File: three_in_row.asm
   2 0000               # Author: Margaret Dorsey
   3 0000               #
   4 0000               # Description:
   5 0000               #
   6 0000               #
   7 0000               #
   8 0000               # Revisions: see gitlog.txt
   9 0000               #
  10 0000               
  11 0000               
  12 0000               #
  13 0000               # CONSTANT DEFINITIONS
  14 0000               #
  15 0000               
  16 0000               # syscalls
  17 0000               READ_INT = 		5
  18 0000               EXIT =			10
  19 0000               
  20 0000               #PRINT SWITCH LITERALS
  21 0000               INVALID_BOARD_SIZE =	0
  22 0000               INVALID_INPUT_VALUE =	1
  23 0000               IMPOSSIBLE_PUZZLE =	2
  24 0000               PROGRAM_BANNER =	3
  25 0000               INITIAL_PUZZLE =	4
  26 0000               FINAL_PUZZLE =		5
  27 0000               NEWLINE	=		6
  28 0000               
  29 0000               #
  30 0000               # DATA BLOCK AND GLOBALS
  31 0000               #
  32 0000               	.globl main		#entry point for program
  33 0000               	.globl print_predef	#for printing
  34 0000               	.globl print_board
  35 0000               	.globl solve
  36 0000               
  37 0000               	.data
  38 0000               	.align 2
  39 0000               board_arr:
  40 0000 00000000		.space 400		#the maximum size we would need for our
          00000000
          00000000
          00000000
          00000000
          00000000
  41 0190               				#board, 10x10x4 bytes
  42 0190               
  43 0190               
  44 0000               	.text
  45 0000               	.align 2	
  46 0000               #
  47 0000               # Name: main
  48 0000               #
  49 0000               # Description:	Handles input, then calls appropriate functions for the 
  50 0000               # 		continuation of the program, and terminates.
  51 0000               #
  52 0000               #		The program itself takes an nxn 3 in a row puzzle and
  53 0000               #		solves it.
  54 0000               #
  55 0000               #
  56 0000               
  57 0000               main:
  58 0000 23BDFFF0		addi	$sp, $sp, -16 		#make space for return address
  59 0004 AFBF0000		sw	$ra, 0($sp)	
  60 0008 AFB00004		sw	$s0, 4($sp)
  61 000c AFB10008		sw	$s1, 8($sp)
  62 0010 AFB2000C		sw	$s2, 12($sp)
  63 0014               
  64 0014 34040003		ori	$a0, $zero, PROGRAM_BANNER #print our banner
  65 0018 0C000000		jal	print_predef
  66 001c               
  67 001c 34020005		ori	$v0, $zero, READ_INT	#get the dimension
  68 0020 0000000C		syscall
  69 0024               
  70 0024 00408025		or	$s0, $v0, $zero		#check value for evenness
  71 0028 32080001		andi	$t0, $s0, 1		#will be 0 if even, 1 if odd
  72 002c 11000003		beq	$t0, $zero, even
  73 0030 34040000		ori	$a0, $zero, INVALID_BOARD_SIZE
  74 0034 0C000000		jal	print_predef		#print out our error message
  75 0038 08000034		j	main_done		#get out of the program
  76 003c               even:
  77 003c 2A080002		slti	$t0, $s0, 2		#less than 2
  78 0040 2A09000B		slti	$t1, $s0, 11		#less than 11
  79 0044 01094820		add	$t1, $t0, $t1		#if less than 2, will be 2
  80 0048               					#if greater than 10 will be 0
  81 0048               					#if in range will be 1
  82 0048               
  83 0048 39290001		xori	$t1, $t1, 1		#if in range will be 0
  84 004c 11200003		beq	$t1, $zero, dim_valid	#break on within range
  85 0050 34040000		ori 	$a0, $zero, INVALID_BOARD_SIZE	
  86 0054 0C000000		jal	print_predef		#print our error message
  87 0058 08000034		j	main_done
  88 005c               dim_valid:	
  89 005c 01009024		and	$s2, $t0, $zero		#set our loop control variable to 0
  90 0060 3C040000		la	$a0, board_arr		#get our memory for the board array
     0064 34840000
  91 0068 02100018		mult	$s0, $s0
  92 006c 00008812		mflo	$s1			#s1 is now n^2
  93 0070               	
  94 0070               board_loop:
  95 0070 12510007		beq	$s2, $s1, board_loop_done
  96 0074 34020005		ori	$v0, $zero, READ_INT	#get our next square
  97 0078 0000000C		syscall	
  98 007c 00022825		or	$a1, $zero, $v0		#get ready to pass it to be checked
  99 0080 0C00003A		jal	enter_square_value
 100 0084 22520001		addi	$s2, $s2, 1
 101 0088 20840004		addi	$a0, $a0, 4		#integer is a byte
 102 008c 0800001C		j	board_loop		#back to top
 103 0090               board_loop_done:
 104 0090               
 105 0090               
 106 0090               
 107 0090               
 108 0090               
 109 0090 34040004		ori	$a0, $zero, INITIAL_PUZZLE	#print header
 110 0094 0C000000		jal	print_predef
 111 0098               						#print board
 112 0098 3C040000		la	$a0, board_arr
     009c 34840000
 113 00a0 02002825		or	$a1, $s0, $zero			#load args for board printing
 114 00a4 0C000000		jal	print_board
 115 00a8               	
 116 00a8 3C040000		la	$a0, board_arr			#solve
     00ac 34840000
 117 00b0 02002825		or	$a1, $s0, $zero
 118 00b4 0C000000		jal	solve
 119 00b8               
 120 00b8               							
 121 00b8               						#solution is over, so output
 122 00b8 34040005		ori	$a0, $zero, FINAL_PUZZLE
 123 00bc 0C000000		jal	print_predef		
 124 00c0               
 125 00c0 3C040000		la 	$a0, board_arr
     00c4 34840000
 126 00c8 02002825		or	$a1, $s0, $zero
 127 00cc 0C000000		jal	print_board
 128 00d0               
 129 00d0               main_done:
 130 00d0 8FB2000C		lw	$s2, 12($sp)
 131 00d4 8FB10008		lw	$s1, 8($sp)
 132 00d8 8FB00004		lw	$s0, 4($sp)			#restore stack
 133 00dc 8FBF0000		lw	$ra, 0($sp)
 134 00e0 23BD0010		addi	$sp, $sp, 16	
 135 00e4 03E00008		jr	$ra				#return
 136 00e8               #
 137 00e8               # Name: enter_square_value
 138 00e8               #
 139 00e8               # Description: 	Validates a read in value for a square (i.e. it is 0, 1, or 2)
 140 00e8               #		and then enters it in to the allocated array for our board.
 141 00e8               #
 142 00e8               # Arguments:	$a0 is pointer to next array element
 143 00e8               #		$a1 is read number
 144 00e8               #
 145 00e8               # Returns: 	nothing
 146 00e8               #
 147 00e8               
 148 00e8               enter_square_value:
 149 00e8 23BDFFF8		addi	$sp, $sp, -8
 150 00ec AFBF0000		sw	$ra, 0($sp)
 151 00f0 AFA40004		sw	$a0, 4($sp)		#main will want this to persist
 152 00f4               
 153 00f4 00A0402A		slt	$t0, $a1, $zero		#check if below zero
 154 00f8 28A90003		slti	$t1, $a1, 3		#check if below 3
 155 00fc 01284820		add	$t1, $t1, $t0		#will be 1 if within range, else 0 or 2
 156 0100 39290001		xori	$t1, $t1, 1		#will be 0 if within range, else 1 or 2
 157 0104               	
 158 0104 11200004		beq	$t1, $zero, valid	#break on valid
 159 0108 34040001		ori	$a0, $zero, INVALID_INPUT_VALUE
 160 010c 0C000000		jal	print_predef		#give error message
 161 0110 3402000A		ori	$v0, $zero, EXIT
 162 0114 0000000C		syscall				#forcibly exit the program
 163 0118               valid:
 164 0118 AC850000		sw	$a1, 0($a0)		#a0 will have never been touched
 165 011c               					#if we get this far
 166 011c               	
 167 011c 8FA40004		lw	$a0, 4($sp)
 168 0120 8FBF0000		lw	$ra, 0($sp)
 169 0124 23BD0008		addi	$sp, $sp, 8
 170 0128 03E00008		jr	$ra
 171 012c               
 172 012c               
 173 012c               


EXIT                 = 0000000A   
FINAL_PUZZLE         = 00000005   
IMPOSSIBLE_PUZZLE    = 00000002   
INITIAL_PUZZLE       = 00000004   
INVALID_BOARD_SIZE   = 00000000   
INVALID_INPUT_VALUE  = 00000001   
NEWLINE              = 00000006   
PROGRAM_BANNER       = 00000003   
READ_INT             = 00000005   
board_arr              00000000 R  data 
board_loop             00000070 R  text 
board_loop_done        00000090 R  text 
dim_valid              0000005C R  text 
enter_square_value     000000E8 R  text 
even                   0000003C R  text 
main                   00000000 RG text 
main_done              000000D0 R  text 
print_board            ******** XG
print_predef           ******** XG
solve                  ******** XG
valid                  00000118 R  text 
