   1 0000               # File: three_in_row.asm
   2 0000               # Author: Margaret Dorsey
   3 0000               #
   4 0000               # Description:
   5 0000               #
   6 0000               #
   7 0000               #
   8 0000               # Revisions: see gitlog.txt
   9 0000               #
  10 0000               
  11 0000               
  12 0000               #
  13 0000               # CONSTANT DEFINITIONS
  14 0000               #
  15 0000               
  16 0000               # syscalls
  17 0000               READ_INT = 		5
  18 0000               EXIT =			10
  19 0000               
  20 0000               #PRINT SWITCH LITERALS
  21 0000               INVALID_BOARD_SIZE =	0
  22 0000               INVALID_INPUT_VALUE =	1
  23 0000               IMPOSSIBLE_PUZZLE =	2
  24 0000               PROGRAM_BANNER =	3
  25 0000               INITIAL_PUZZLE =	4
  26 0000               FINAL_PUZZLE =		5
  27 0000               NEWLINE	=		6
  28 0000               
  29 0000               #
  30 0000               # DATA BLOCK AND GLOBALS
  31 0000               #
  32 0000               	.globl main		#entry point for program
  33 0000               	.globl print_predef	#for printing
  34 0000               	.globl print_board
  35 0000               
  36 0000               	.data
  37 0000               	.align 2
  38 0000               board_arr:
  39 0000 00000000		.space 400		#the maximum size we would need for our
          00000000
          00000000
          00000000
          00000000
          00000000
  40 0190               				#board, 10x10x4 bytes
  41 0190               
  42 0190               
  43 0000               	.text
  44 0000               	.align 2	
  45 0000               #
  46 0000               # Name: main
  47 0000               #
  48 0000               # Description:	Handles input, then calls appropriate functions for the 
  49 0000               # 		continuation of the program, and terminates.
  50 0000               #
  51 0000               #		The program itself takes an nxn 3 in a row puzzle and
  52 0000               #		solves it.
  53 0000               #
  54 0000               #
  55 0000               
  56 0000               main:
  57 0000 23BDFFF0		addi	$sp, $sp, -16 		#make space for return address
  58 0004 AFBF0000		sw	$ra, 0($sp)	
  59 0008 AFB00004		sw	$s0, 4($sp)
  60 000c AFB10008		sw	$s1, 8($sp)
  61 0010 AFB2000C		sw	$s2, 12($sp)
  62 0014               
  63 0014 34020005		ori	$v0, $zero, READ_INT	#get the dimension
  64 0018 0000000C		syscall
  65 001c               
  66 001c 00408025		or	$s0, $v0, $zero		#check value for evenness
  67 0020 32080001		andi	$t0, $s0, 1		#will be 0 if even, 1 if odd
  68 0024 11000003		beq	$t0, $zero, even
  69 0028 34040000		ori	$a0, $zero, INVALID_BOARD_SIZE
  70 002c 0C000000		jal	print_predef		#print out our error message
  71 0030 0800002B		j	main_done		#get out of the program
  72 0034               even:
  73 0034 2A080002		slti	$t0, $s0, 2		#less than 2
  74 0038 2A09000B		slti	$t1, $s0, 11		#less than 11
  75 003c 01094820		add	$t1, $t0, $t1		#if less than 2, will be 2
  76 0040               					#if greater than 10 will be 0
  77 0040               					#if in range will be 1
  78 0040               
  79 0040 39290001		xori	$t1, $t1, 1		#if in range will be 0
  80 0044 11200003		beq	$t1, $zero, dim_valid	#break on within range
  81 0048 34040000		ori 	$a0, $zero, INVALID_BOARD_SIZE	
  82 004c 0C000000		jal	print_predef		#print our error message
  83 0050 0800002B		j	main_done
  84 0054               dim_valid:	
  85 0054 01009024		and	$s2, $t0, $zero		#set our loop control variable to 0
  86 0058 3C040000		la	$a0, board_arr		#get our memory for the board array
     005c 34840000
  87 0060 02100018		mult	$s0, $s0
  88 0064 00008812		mflo	$s1			#s1 is now n^2
  89 0068               	
  90 0068               board_loop:
  91 0068 12510007		beq	$s2, $s1, board_loop_done
  92 006c 34020005		ori	$v0, $zero, READ_INT	#get our next square
  93 0070 0000000C		syscall	
  94 0074 00022825		or	$a1, $zero, $v0		#get ready to pass it to be checked
  95 0078 0C000031		jal	enter_square_value
  96 007c 22520001		addi	$s2, $s2, 1
  97 0080 20840004		addi	$a0, $a0, 4		#integer is a byte
  98 0084 0800001A		j	board_loop		#back to top
  99 0088               board_loop_done:
 100 0088 34040003		ori	$a0, $zero, PROGRAM_BANNER	#print our banner
 101 008c 0C000000		jal	print_predef
 102 0090 34040004		ori	$a0, $zero, INITIAL_PUZZLE	#print header
 103 0094 0C000000		jal	print_predef
 104 0098               	# print board
 105 0098 3C040000		la	$a0, board_arr
     009c 34840000
 106 00a0 02002825		or	$a1, $s0, $zero		#load args for board printing
 107 00a4 0C000000		jal	print_board
 108 00a8               	
 109 00a8               	#solve
 110 00a8               
 111 00a8               	#solution over
 112 00a8               	
 113 00a8 34040005		ori	$a0, $zero, FINAL_PUZZLE
 114 00ac               	#print board
 115 00ac               main_done:
 116 00ac 8FB2000C		lw	$s2, 12($sp)
 117 00b0 8FB10008		lw	$s1, 8($sp)
 118 00b4 8FB00004		lw	$s0, 4($sp)		#restore stack
 119 00b8 8FBF0000		lw	$ra, 0($sp)
 120 00bc 23BD0010		addi	$sp, $sp, 16	
 121 00c0 03E00008		jr	$ra			#return
 122 00c4               #
 123 00c4               # Name: enter_square_value
 124 00c4               #
 125 00c4               # Description: 	Validates a read in value for a square (i.e. it is 0, 1, or 2)
 126 00c4               #		and then enters it in to the allocated array for our board.
 127 00c4               #
 128 00c4               # Arguments:	$a0 is pointer to next array element
 129 00c4               #		$a1 is read number
 130 00c4               #
 131 00c4               # Returns: 	nothing
 132 00c4               #
 133 00c4               
 134 00c4               enter_square_value:
 135 00c4 23BDFFF8		addi	$sp, $sp, -8
 136 00c8 AFBF0000		sw	$ra, 0($sp)
 137 00cc AFA40004		sw	$a0, 4($sp)		#main will want this to persist
 138 00d0               
 139 00d0 00A0402A		slt	$t0, $a1, $zero		#check if below zero
 140 00d4 28A90003		slti	$t1, $a1, 3		#check if below 3
 141 00d8 01284820		add	$t1, $t1, $t0		#will be 1 if within range, else 0 or 2
 142 00dc 39290001		xori	$t1, $t1, 1		#will be 0 if within range, else 1 or 2
 143 00e0               	
 144 00e0 11200004		beq	$t1, $zero, valid	#break on valid
 145 00e4 34040001		ori	$a0, $zero, INVALID_INPUT_VALUE
 146 00e8 0C000000		jal	print_predef		#give error message
 147 00ec 3402000A		ori	$v0, $zero, EXIT
 148 00f0 0000000C		syscall				#forcibly exit the program
 149 00f4               valid:
 150 00f4 AC850000		sw	$a1, 0($a0)		#a0 will have never been touched
 151 00f8               					#if we get this far
 152 00f8               	
 153 00f8 8FA40004		lw	$a0, 4($sp)
 154 00fc 8FBF0000		lw	$ra, 0($sp)
 155 0100 23BD0008		addi	$sp, $sp, 8
 156 0104 03E00008		jr	$ra
 157 0108               
 158 0108               
 159 0108               


EXIT                 = 0000000A   
FINAL_PUZZLE         = 00000005   
IMPOSSIBLE_PUZZLE    = 00000002   
INITIAL_PUZZLE       = 00000004   
INVALID_BOARD_SIZE   = 00000000   
INVALID_INPUT_VALUE  = 00000001   
NEWLINE              = 00000006   
PROGRAM_BANNER       = 00000003   
READ_INT             = 00000005   
board_arr              00000000 R  data 
board_loop             00000068 R  text 
board_loop_done        00000088 R  text 
dim_valid              00000054 R  text 
enter_square_value     000000C4 R  text 
even                   00000034 R  text 
main                   00000000 RG text 
main_done              000000AC R  text 
print_board            ******** XG
print_predef           ******** XG
valid                  000000F4 R  text 
